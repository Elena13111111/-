# Занятие 31. Обработка икслючений
# - Исключения
# - Отлов сразу нескольких исключений
# - Иерархия исключений
# - finally / else
# - traceback

# Исключение -это те ошибки , кот.возникают при не правильном составлении кода
# Логирование -это записывание куда-то произошедших ключевых моментов ,в том числе и ошибок.(except Exception as e:)



import time
import traceback

data = ['a', 'b', 'Андрей']
# print(data[5]) --> Исключение, такого индекса нету. есть : 0, 1, 2 .

# Как избежать Исключения (ошибки)
# 1. Вариант. Проверка количества элементов
# if len(data) >= 6:        #если в слове меньше или равно 6 символос
#     print(data[6])
# else:
#     print('В списке меньше 6 элементов')   # Этот вариант, чтобы программа не выдавала ошибку, можно ее предовратить
#>> В списке меньше 6 элементов

# 2 Вариант. С обраткой исключений / для предовращения наибольших ошибок или проблем / Логические ошибки по порядку расположены
# try, except,else, finally -это 4 блока в конструкции try
# try:  # тут проверка на потенциальную ошибку
#     print(data[3])   #3 индекс ,кот. нету
#     # 1 / 0
#     # print()
# # в скобках мы ловим все такие ошибки/ ArithmeticError - это деление на ноль, IndexError - это проблема с индексом
# except (ArithmeticError, IndexError):     #обработчик ошибок
#     print('ArithmeticError или IndexError')
# # по иерархии Исключений (ошибок) Exception -это дочерне искл-ие.
# except Exception as e:    # ЛОгирование/ создаем переменную где будет лежать это исключение
#     traceback.print_exc()   #обработка ошибки и прога работает дальше
#     print('Другая ошибка')
# else:                       # в случае ,если ошибок не было
#     print('Ошибок не было')
# finally:                     # вызываеться в любом случае
#     print('Блок finally')
#
#
# print('Следющая строчка кода')

# >>ArithmeticError или IndexError
# Блок finally
# Следющая строчка кода
# --------------------------

# 3. Пример с finally
def f1(n1, n2):
    try:
        print('try')
        return n1 / n2
    except:
        print('except')
        return 0
    finally:
        print('finally')
        # тут return не нужен
print(f1(1, 2))

# >>try
# finally
# 0.5